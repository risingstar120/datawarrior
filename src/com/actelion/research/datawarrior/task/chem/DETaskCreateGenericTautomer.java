/* * Copyright 2017 Idorsia Pharmaceuticals Ltd., Hegenheimermattweg 91, CH-4123 Allschwil, Switzerland * * This file is part of DataWarrior. *  * DataWarrior is free software: you can redistribute it and/or modify it under the terms of the * GNU General Public License as published by the Free Software Foundation, either version 3 of * the License, or (at your option) any later version. *  * DataWarrior is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * See the GNU General Public License for more details. * You should have received a copy of the GNU General Public License along with DataWarrior. * If not, see http://www.gnu.org/licenses/. * * @author Thomas Sander */package com.actelion.research.datawarrior.task.chem;import com.actelion.research.chem.Canonizer;import com.actelion.research.chem.CanonizerUtil;import com.actelion.research.chem.StereoMolecule;import com.actelion.research.chem.TautomerHelper;import com.actelion.research.chem.io.CompoundTableConstants;import com.actelion.research.datawarrior.DEFrame;import java.util.Properties;public class DETaskCreateGenericTautomer extends DETaskAbstractFromStructure {	public static final String TASK_NAME = "Create Generic Tautomer";	private int					mOriginalCoordsColumn;    public DETaskCreateGenericTautomer(DEFrame parent) {	    super(parent, DESCRIPTOR_NONE, false, true);	    }	@Override	protected int getNewColumnCount() {		return getTableModel().getChildColumn(getChemistryColumn(), CompoundTableConstants.cColumnType2DCoordinates) == -1 ? 3 : 4;		}	@Override	protected String getNewColumnName(int column) {		return column == 0 ? "Tautomer Hash" : column == 1 ? "Tautomer Count" : ""; // other columns are done by setNewColumnProperties()		}	@Override	public String getTaskName() {		return TASK_NAME;	}	@Override	public boolean hasExtendedDialogContent() {		return false;	}	@Override	protected boolean preprocessRows(Properties configuration) {		mOriginalCoordsColumn = getTableModel().getChildColumn(getChemistryColumn(), CompoundTableConstants.cColumnType2DCoordinates);		return super.preprocessRows(configuration);		}	@Override	public void processRow(int row, int firstNewColumn, StereoMolecule containerMol) {		assert(firstNewColumn != -1);		StereoMolecule mol = getChemicalStructure(row, containerMol);		if (mol != null) {			TautomerHelper th = new TautomerHelper(mol);			StereoMolecule tautomer = th.createGenericTautomer();			if (tautomer != mol) {				Canonizer canonizer = new Canonizer(tautomer, Canonizer.ENCODE_ATOM_CUSTOM_LABELS);				getTableModel().setTotalValueAt(""+CanonizerUtil.StrongHasher.hash(canonizer.getIDCode()), row, firstNewColumn);				getTableModel().setTotalValueAt(""+th.getTautomerCount(), row, firstNewColumn+1);				getTableModel().setTotalValueAt(canonizer.getIDCode(), row, firstNewColumn+2);				if (mOriginalCoordsColumn != -1)					getTableModel().setTotalValueAt(canonizer.getEncodedCoordinates(), row, firstNewColumn+3);				}			}		}	@Override	protected void setNewColumnProperties(int firstNewColumn) {		getTableModel().prepareStructureColumns(firstNewColumn+2, "Generic Tautomer", mOriginalCoordsColumn != -1, false);		}	}