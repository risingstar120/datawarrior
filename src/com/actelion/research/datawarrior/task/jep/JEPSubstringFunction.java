/* * Copyright 2017 Idorsia Pharmaceuticals Ltd., Hegenheimermattweg 91, CH-4123 Allschwil, Switzerland * * This file is part of DataWarrior. *  * DataWarrior is free software: you can redistribute it and/or modify it under the terms of the * GNU General Public License as published by the Free Software Foundation, either version 3 of * the License, or (at your option) any later version. *  * DataWarrior is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * See the GNU General Public License for more details. * You should have received a copy of the GNU General Public License along with DataWarrior. * If not, see http://www.gnu.org/licenses/. * * @author Thomas Sander */package com.actelion.research.datawarrior.task.jep;import org.nfunk.jep.ParseException;import org.nfunk.jep.function.PostfixMathCommand;import java.util.Stack;/** * An Actelion custom function class for JEP * to find the nth occurence of a substring in a text string. * syntax: indexof(String text, String searchText, int n) */public class JEPSubstringFunction extends PostfixMathCommand {	public JEPSubstringFunction() {		numberOfParameters = 3;	}	/**	 * Runs the operation on the inStack. The parameters are popped	 * off the <code>inStack</code>, and the square root of it's value is 	 * pushed back to the top of <code>inStack</code>.	 */	public void run(Stack inStack) throws ParseException {		// check the stack		checkStack(inStack);		// get the parameters from the stack		Object param3 = inStack.pop();		Object param2 = inStack.pop();		Object param1 = inStack.pop();		// check whether the argument is of the right type		if (param1 instanceof String		 && param2 instanceof Double		 && param3 instanceof Double) {			String s = (String)param1;			int n1 = ((Double)param2).intValue();			int n2 = ((Double)param3).intValue();			String ss = "";			if (n1>=1 && n1<=s.length() && n2>n1)				ss = s.substring(n1-1, Math.min(n2-1, s.length()));			// push the result on the inStack			inStack.push(ss);		}		else {			throw new ParseException("Invalid parameter type");		}	}}